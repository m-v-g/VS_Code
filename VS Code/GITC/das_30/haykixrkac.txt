int main(){
        SortByAge sortByAge;
        SortByIq sortByIq;
        Map<Specialist, string> x(&sortByIq);
    Map<string,int> BST(&s);
    BST.add("one",200);
    BST.add("Two",21);
    BST.add("Three",20);
    BST.add("Four",12);
    BST.add("Five",200);
    BST.add("Six",200);
    BST.add("Seven",111);
    BST.print();
    cout<<endl;
    cout<<BST.find("Three");
    cout<<endl;
    return 0;
}







template <class T>
class Comparator{
        public:
        int hamematel(T a, T b){};
};
class SortByAge : public Comparator<Specialist>{
        public:
                int hamematel(Specialist a, Specialist b){
                        if(a.age > b.age){
                                return 1;
                        }else if(a.age == b.age){
                                return 0;
                        }else{
                                return -1;
                        }
                }
};
class SortByIq : public Comparator<Specialist>{
        public:
                int hamematel(Specialist a, Specialist b){
                        if(a.iq > b.iq>){
                                return 1;
                        }else if(a.age == b.age){
                                return 0;
                        }else{
                                return 1;
                        }
                }
}





template <class K, class V>
class Map{
private:
    Node<K,V>* root = nullptr;
    int length = 0;
    Comparator* comparator;
public:
        Map(Comparator* p){
                this->p = p;
        }






        if(is_empty()){
                if(!find(key)){
                    root = new Node<K,V>(key,value);
                    length++;
                }
            }else if((comparator->hamematel(key, temp->key))==-1){
                if(temp->left!=nullptr){
                    addRec(temp->left, value,key);
                }else{
                    if(!find(key)){